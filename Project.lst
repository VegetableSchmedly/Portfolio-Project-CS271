Microsoft (R) Macro Assembler Version 14.29.30147.0	    03/10/23 19:00:25
 Project 6     (Proj6_dalyer.asm			     Page 1 - 1


				TITLE Project 6     (Proj6_dalyer.asm)

				; Author: Eric Daly
				; Last Modified: 3/7/2023
				; OSU email address: dalyer@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number:  6              Due Date: 3/19/2023
				; Description: Uses 2 macros for string processing. One that gets input from the user and one that dispalys the output.
				;		Has two test procedures for signed integers which use string primitive instructions. ReadVal will use mGetString to convert the string of ASCII
				;		digits to its numeric value, and validate the user's input. It then stores the value. WriteVal will convert a numeric SDWORD to a string of ASCII
				;		digits and use mDisplayString to print the ASCII representation of the SDWORD.
				;		Then, MAIN will use ReadVal and WriteVal to get 10 integers from a user, looping in MAIN, store these values in array format, then display
				;		the integers and their sum and truncated average.

				;;		Must use Register Indirect addressing or string primitives for integer elements, 
				;;		and base+offset addresing for accessing parameters on the stack!!!

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; (insert macro definitions here)
				; ---------------------------------------------------------------------------------
				; Name: mGetString
				;
				; Purpose: Display a prompt then get the user's keyboard input into a memory location.
				;
				; Receives:
				;
				; ---------------------------------------------------------------------------------
				mGetString			MACRO	promptReference, userInputReference, countValue, bytesReadReference
				; Displays a prompt, and then gets the user's input and stores in in a specific memory location.
					PUSH		ECX
					PUSH		EDX
					PUSH		EAX
					
					MOV			EDX, promptReference
					CALL		WriteString					; Writes Prompt

					MOV			ECX, countValue				; Length of input string macro can accomodate
					MOV			EDX, userInputReference
					CALL		ReadString				; stores userInput to userInputReference memory location. Should be OFFSET userNum.

					MOV			[bytesReadReference], EAX	; Stores number of bytes entered into bytesRead.

					POP			EAX
					POP			EDX
					POP			ECX
				ENDM

				; ---------------------------------------------------------------------------------
				; Name: mDisplayString
				;
				; Purpose:
				;
				; Receives:
				;
				; ---------------------------------------------------------------------------------
				mDisplayString		MACRO	stringReference
					PUSH		EDX

					MOV			EDX, stringReference
					CALL		WriteString

					POP			EDX
				ENDM

				; (insert constant definitions here)


 = "+",0			PLUS			EQU		<"+",0>
 = "-",0			MINUS			EQU		<"-",0>
 = 00000015			MAXCHAR			=		21

 00000000			.data

				; (insert variable definitions here)


 00000000 50 72 6F 67 72	program				BYTE		"Programming Assignment 6: Designing low-level I/O Procedures",13,10,0
	   61 6D 6D 69 6E
	   67 20 41 73 73
	   69 67 6E 6D 65
	   6E 74 20 36 3A
	   20 44 65 73 69
	   67 6E 69 6E 67
	   20 6C 6F 77 2D
	   6C 65 76 65 6C
	   20 49 2F 4F 20
	   50 72 6F 63 65
	   64 75 72 65 73
	   0D 0A 00
 0000003F 45 72 69 63 20	myName				BYTE		"Eric Daly",0
	   44 61 6C 79 00
 00000049 57 72 69 74 74	by					BYTE		"Written by: ",0
	   65 6E 20 62 79
	   3A 20 00
 00000056 50 6C 65 61 73	directions1			BYTE		"Please provide 10 signed decimal integers.",13,10,0
	   65 20 70 72 6F
	   76 69 64 65 20
	   31 30 20 73 69
	   67 6E 65 64 20
	   64 65 63 69 6D
	   61 6C 20 69 6E
	   74 65 67 65 72
	   73 2E 0D 0A 00
 00000083 45 61 63 68 20	description1		BYTE		"Each number needs to be small enough to fit inside a 32 bit register. ",13,10,0
	   6E 75 6D 62 65
	   72 20 6E 65 65
	   64 73 20 74 6F
	   20 62 65 20 73
	   6D 61 6C 6C 20
	   65 6E 6F 75 67
	   68 20 74 6F 20
	   66 69 74 20 69
	   6E 73 69 64 65
	   20 61 20 33 32
	   20 62 69 74 20
	   72 65 67 69 73
	   74 65 72 2E 20
	   0D 0A 00
 000000CC 41 66 74 65 72	description2		BYTE		"After you have finished inputting the raw numbers I will display a list of the integers, their sum, and their average value.",13,10,0
	   20 79 6F 75 20
	   68 61 76 65 20
	   66 69 6E 69 73
	   68 65 64 20 69
	   6E 70 75 74 74
	   69 6E 67 20 74
	   68 65 20 72 61
	   77 20 6E 75 6D
	   62 65 72 73 20
	   49 20 77 69 6C
	   6C 20 64 69 73
	   70 6C 61 79 20
	   61 20 6C 69 73
	   74 20 6F 66 20
	   74 68 65 20 69
	   6E 74 65 67 65
	   72 73 2C 20 74
	   68 65 69 72 20
	   73 75 6D 2C 20
	   61 6E 64 20 74
	   68 65 69 72 20
	   61 76 65 72 61
	   67 65 20 76 61
	   6C 75 65 2E 0D
	   0A 00
 0000014B 50 6C 65 61 73	prompt				BYTE		"Please enter a signed number: ",0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 6E 75 6D
	   62 65 72 3A 20
	   00
 0000016A  00000014 [		userNum				byte		20 DUP(?)
	    00
	   ]
 0000017E 45 52 52 4F 52	error				BYTE		"ERROR: You did not enter a signed number or your number was too big. Try again!",0
	   3A 20 59 6F 75
	   20 64 69 64 20
	   6E 6F 74 20 65
	   6E 74 65 72 20
	   61 20 73 69 67
	   6E 65 64 20 6E
	   75 6D 62 65 72
	   20 6F 72 20 79
	   6F 75 72 20 6E
	   75 6D 62 65 72
	   20 77 61 73 20
	   74 6F 6F 20 62
	   69 67 2E 20 54
	   72 79 20 61 67
	   61 69 6E 21 00
 000001CE 00000000		currentNum			SDWORD		?
 000001D2  0000000A [		numArray			SDWORD		10 DUP(?)
	    00000000
	   ]
 000001FA 59 6F 75 20 65	closingDisplay		BYTE		"You entered the following numbers:",13,10,0
	   6E 74 65 72 65
	   64 20 74 68 65
	   20 66 6F 6C 6C
	   6F 77 69 6E 67
	   20 6E 75 6D 62
	   65 72 73 3A 0D
	   0A 00
 0000021F  00000014 [		numString			BYTE		20 DUP (?)
	    00
	   ]
 00000233  00000014 [		revString			BYTE		20 DUP (?)
	    00
	   ]
 00000247 00000000		sum					SDWORD		?
 0000024B 54 68 65 20 73	sumString			BYTE		"The sum of these numbers is: ",13,10,0
	   75 6D 20 6F 66
	   20 74 68 65 73
	   65 20 6E 75 6D
	   62 65 72 73 20
	   69 73 3A 20 0D
	   0A 00
 0000026B 00000000		truncatedAverage	SDWORD		?
 0000026F 54 68 65 20 74	avgString			BYTE		"The truncated average is ",13,10,0
	   72 75 6E 63 61
	   74 65 64 20 61
	   76 65 72 61 67
	   65 20 69 73 20
	   0D 0A 00
 0000028B 00000020		countValue			SDWORD		32		; Should it be 12 to account for -2147483648 and null terminator?
 0000028F 00000000		bytesRead			DWORD		0
 00000293 00000000		isNeg				DWORD		0		; assumed positive -- BOOLEAN 0 if popsitive, 1 if negative


 00000000			.code
 00000000			main PROC

				; (insert executable instructions here)
 00000000  68 00000000 R		PUSH		OFFSET program
 00000005  68 00000049 R		PUSH		OFFSET by
 0000000A  68 0000003F R		PUSH		OFFSET myName
 0000000F  68 00000056 R		PUSH		OFFSET directions1
 00000014  68 00000083 R		PUSH		OFFSET description1
 00000019  68 000000CC R		PUSH		OFFSET description2
 0000001E  E8 000000BE			CALL		Introduction

					; Set up ReadVal loop
 00000023  BA 000001D2 R		MOV			EDX, OFFSET numArray
 00000028  B9 0000000A			MOV			ECX, 10
 0000002D  BB 00000004			MOV			EBX, 4
 00000032  B8 00000000			MOV			EAX, 0
 00000037				_ReadValLoop:				; convert strings to integers until 10 valid are captured.
 00000037  68 00000293 R			PUSH		OFFSET isNeg
 0000003C  68 0000014B R			PUSH		OFFSET prompt
 00000041  68 0000016A R			PUSH		OFFSET userNum
 00000046  FF 35 0000028B R			PUSH		countValue
 0000004C  68 0000028F R			PUSH		OFFSET bytesRead
 00000051  68 0000017E R			PUSH		OFFSET error
 00000056  68 000001CE R			PUSH		OFFSET currentNum
 0000005B  E8 000000C4				CALL		ReadVal
 00000060  8B 3D 000001CE R			MOV			EDI, currentNum
 00000066  89 3A				MOV			[EDX], EDI			; put currentNum into proper location in array
 00000068  03 D3				ADD			EDX, EBX			; increment SDWORD array by 4 (SDWORD)
 0000006A  03 05 000001CE R			ADD			EAX, currentNum		; ADD to sum
 00000070  E2 C5			LOOP		_ReadValLoop	
 00000072  A3 00000247 R		MOV			sum, EAX			; capture sum
 00000077  E8 00000000 E		CALL		CrLf
 0000007C  E8 00000000 E		CALL		CrLf


					; Print out array as strings
 00000081  BA 000001FA R		MOV			EDX, OFFSET closingDisplay
 00000086  E8 00000000 E		CALL		WriteString
 0000008B  B9 0000000A			MOV			ECX, 10
 00000090  BB 00000000			MOV			EBX, 0
 00000095  B8 00000000			MOV			EAX, 0
 0000009A				_PrintArrayLoop:
 0000009A  B8 000001D2 R			MOV			EAX, OFFSET numArray	
 0000009F  C7 05 00000293 R			MOV			isNeg, 0				; assume positive
	   00000000

 000000A9  68 00000233 R			PUSH		OFFSET revString
 000000AE  68 00000293 R			PUSH		OFFSET isNeg
 000000B3  68 0000021F R			PUSH		OFFSET numString
 000000B8  FF 34 18				PUSH		[EAX + EBX]
 000000BB  E8 0000012C				CALL		WriteVal
 000000C0  83 C3 04				ADD			EBX, 4
 000000C3  50					PUSH		EAX
 000000C4  B8 00000000				MOV			EAX, 0
 000000C9  B0 2C				MOV			AL, ','
 000000CB  E8 00000000 E			CALL		WriteChar
 000000D0  B0 20				MOV			AL, ' '
 000000D2  E8 00000000 E			CALL		WriteChar
 000000D7  58					POP			EAX
								
 000000D8  E2 C0			LOOP		_PrintArrayLoop


					Invoke ExitProcess,0	; exit to operating system
 000000DA  6A 00	   *	    push   +000000000h
 000000DC  E8 00000000 E   *	    call   ExitProcess
 000000E1			main ENDP

				; (insert additional procedures here)


				; ---------------------------------------------------------------------------------
				; Name: findSmallest
				;
				; Invokes mGetString to get user input and converts it to its numeric value SDWORD. 
				;	Then validates it is a number and stores it in an array.
				;
				; Preconditions: the array contains only positive values.
				;
				; Postconditions: none.
				;
				; Receives:
				; [ebp+16] = type of array element
				; [ebp+12] = length of array
				; [ebp+8] = address of array
				; arrayMsg, arrayError are global variables
				;
				; returns: eax = smallest integer
				; ---------------------------------------------------------------------------------

 000000E1			Introduction PROC
				; Writes all of the instructions to the screen
 000000E1  55				PUSH		EBP
 000000E2  8B EC			MOV			EBP, ESP
 000000E4  52				PUSH		EDX

 000000E5  8B 55 1C			MOV			EDX, [EBP+28]
 000000E8  E8 00000000 E		CALL		WriteString

 000000ED  8B 55 18			MOV			EDX, [EBP+24]
 000000F0  E8 00000000 E		CALL		WriteString

 000000F5  8B 55 14			MOV			EDX, [EBP+20]
 000000F8  E8 00000000 E		CALL		WriteString
 000000FD  E8 00000000 E		CALL		CrLf
 00000102  E8 00000000 E		CALL		CrLf

 00000107  8B 55 10			MOV			EDX, [EBP+16]
 0000010A  E8 00000000 E		CALL		WriteString

 0000010F  8B 55 0C			MOV			EDX, [EBP+12]
 00000112  E8 00000000 E		CALL		WriteString

 00000117  8B 55 08			MOV			EDX, [EBP+8]
 0000011A  E8 00000000 E		CALL		WriteString


 0000011F  5A				POP			EDX
 00000120  5D				POP			EBP
 00000121  C2 0018			RET			24


 00000124			Introduction ENDP



				; ---------------------------------------------------------------------------------
				; Name: findSmallest
				;
				; Invokes mGetString to get user input and converts it to its numeric value SDWORD. 
				;	Then validates it is a number and stores it in an array.
				;
				; Preconditions: the array contains only positive values.
				;
				; Postconditions: none.
				;
				; Receives:
				; [ebp+32] = OFFSET isNeg
				; [ebp+28] = OFFSET prompt
				; [ebp+24] = OFFSET userNum
				; [ebp+20] = countValue
				; [ebp+16] = OFFFSET bytesRead
				; [ebp+12] = OFFSET error
				; [ebp+8] = OFFSET currentNum
				; arrayMsg, arrayError are global variables
				;
				; returns: eax = smallest integer
				; ---------------------------------------------------------------------------------
 00000124			ReadVal PROC
				;  Invokes mGetString to get user input and converts it to its numeric value SDWORD. Then validates it is a number and stores it in an array.
 00000124  55				PUSH		EBP
 00000125  8B EC			MOV			EBP, ESP
 00000127  50				PUSH		EAX
 00000128  53				PUSH		EBX
 00000129  51				PUSH		ECX
 0000012A  52				PUSH		EDX
 0000012B  56				PUSH		ESI
 0000012C  57				PUSH		EDI	
 0000012D  8B 5D 10			MOV			EBX, [EBP+16]			; BYTES READ
 00000130  BF 00000000			MOV			EDI, 0					; accumulator
 00000135				_start:

					mGetString	[EBP + 28], [EBP + 24], MAXCHAR, EBX
 00000135  51		     1		PUSH		ECX
 00000136  52		     1		PUSH		EDX
 00000137  50		     1		PUSH		EAX
 00000138  8B 55 1C	     1		MOV			EDX, [EBP + 28]
 0000013B  E8 00000000 E     1		CALL		WriteString					; Writes Prompt
 00000140  B9 00000015	     1		MOV			ECX, MAXCHAR				; Length of input string macro can accomodate
 00000145  8B 55 18	     1		MOV			EDX, [EBP + 24]
 00000148  E8 00000000 E     1		CALL		ReadString				; stores userInput to userInputReference memory location. Should be OFFSET userNum.
 0000014D  89 03	     1		MOV			[EBX], EAX	; Stores number of bytes entered into bytesRead.
 0000014F  58		     1		POP			EAX
 00000150  5A		     1		POP			EDX
 00000151  59		     1		POP			ECX

 00000152  8B 03			MOV			EAX, [EBX]
 00000154  3B 45 14			CMP			EAX, [ebp+20]			; compared bytes read to max allowable length
 00000157  7F 40			JG			_error
 00000159  83 F8 00			CMP			EAX, 0
 0000015C  74 3B			JE			_error

 0000015E  8B C8			MOV			ECX, EAX				; BYTES READ
 00000160  FC				CLD									;Clear direction Flag - move forwards
 00000161  8B 75 18			MOV			ESI, [EBP + 24]			; userNum input string location
 00000164  B8 00000000			MOV			EAX, 0
 00000169				_conversionLoop:
 00000169  AC					LODSB
 0000016A  3C 2B				CMP			AL, '+'
 0000016C  74 27				JE			_endLoop				; skip positive sign
 0000016E  3C 2D				CMP			AL, '-'
 00000170  74 38				JE			_minusSign				; handle negative number
 00000172  3C 2B				CMP			AL, '+'
 00000174  74 44				JE			_plusSign
 00000176  3C 30				CMP			AL, '0'
 00000178  72 1F				JB			_error
 0000017A  3C 39				CMP			AL, '9'
 0000017C  77 1B				JA			_error
											
															; Otherwise, number is good, convert and add to integer array.

 0000017E  BB 0000000A				MOV			EBX, 10	
 00000183  50					PUSH		EAX
 00000184  8B C7				MOV			EAX, EDI				; multiply accumulator by 10 for each digit
 00000186  F7 EB				IMUL		EBX
 00000188  8B F8				MOV			EDI, EAX				; move product back to accumulator
 0000018A  B8 00000000				MOV			EAX, 0
 0000018F  58					POP			EAX						; add next digit to accumulator
 00000190  83 E8 30				SUB			EAX, 48
 00000193  03 F8				ADD			EDI, EAX				; Use same sized register

 00000195					_endLoop:
 00000195  E2 D2			LOOP		_conversionLoop
 00000197  EB 31			JMP			_endOfProc


 00000199				_error:
					; The string values are not ASCII for a number or a +/- sign.
 00000199  52				PUSH		EDX
 0000019A  8B 55 0C			MOV			EDX, [EBP+12]
 0000019D  E8 00000000 E		CALL		WriteString
 000001A2  5A				POP			EDX
 000001A3  E8 00000000 E		CALL		CrLf
 000001A8  EB 8B			JMP			_start



 000001AA				_minusSign:
 000001AA  53				PUSH		EBX
 000001AB  51				PUSH		ECX
 000001AC  8B 5D 20			MOV			EBX, [EBP+32]
 000001AF  B9 00000001			MOV			ECX, 1
 000001B4  89 0B			MOV			[EBX], ECX
 000001B6  59				POP			ECX
 000001B7  5B				POP			EBX
 000001B8  EB DB			JMP			_endLoop

 000001BA				_plusSign:
 000001BA  53				PUSH		EBX
 000001BB  51				PUSH		ECX
 000001BC  8B 5D 20			MOV			EBX, [EBP+32]
 000001BF  B9 00000000			MOV			ECX, 0
 000001C4  89 0B			MOV			[EBX], ECX
 000001C6  59				POP			ECX
 000001C7  5B				POP			EBX
 000001C8  EB CB			JMP			_endLoop

 000001CA				_endOfProc:
					; IF [EBP+32] IS 1, NEG THE NUMBER.
 000001CA  8B 5D 20			MOV			EBX, [EBP+32]
 000001CD  8B 0B			MOV			ECX, [EBX]
 000001CF  83 F9 00			CMP			ECX, 0
 000001D2  74 09			JE			_notNeg
 000001D4  F7 DF			NEG			EDI
 000001D6  B9 00000000			MOV			ECX, 0
 000001DB  89 0B			MOV			[EBX], ECX
 000001DD				_notNeg:			; avoid NEG
 000001DD  8B 45 08			MOV			EAX, [EBP+8]
 000001E0  89 38			MOV			[EAX], EDI

 000001E2  5F				POP			EDI
 000001E3  5E				POP			ESI
 000001E4  5A				POP			EDX
 000001E5  59				POP			ECX
 000001E6  5B				POP			EBX
 000001E7  58				POP			EAX
 000001E8  5D				POP			EBP
 000001E9  C2 001C			RET			28

 000001EC			ReadVal ENDP



				; ---------------------------------------------------------------------------------
				; Name: WriteVal
				;
				; Finds the smallest integer in an array and returns it in the eax register.
				;
				; Preconditions: the array contains only positive values.
				;
				; Postconditions: none.
				;
				; Receives:
				; [ebp+32] = OFFSET isNeg
				; [ebp+28] = OFFSET prompt
				; [ebp+24] = OFFSET userNum					; STILL NEEDS CHANGING
				; [ebp+20] = countValue
				; [ebp+16] = OFFFSET bytesRead
				; [ebp+12] = OFFSET error
				; [ebp+8] = OFFSET currentNum
				; arrayMsg, arrayError are global variables
				;
				; returns: eax = smallest integer
				; ---------------------------------------------------------------------------------
 000001EC			WriteVal PROC
				; 
 000001EC  55				PUSH		EBP
 000001ED  8B EC			MOV			EBP, ESP
 000001EF  50				PUSH		EAX
 000001F0  53				PUSH		EBX
 000001F1  51				PUSH		ECX
 000001F2  52				PUSH		EDX
 000001F3  56				PUSH		ESI
 000001F4  57				PUSH		EDI	
 000001F5  8B 5D 10			MOV			EBX, [EBP+16]			; offset isNeg
 000001F8  8B 7D 14			MOV			EDI, [EBP+20]			; Reverse numstring offset
 000001FB  B9 00000000			MOV			ECX, 0				; count for string reversal
					; CHeck if neg.
 00000200  8B 45 08			MOV			EAX, [EBP + 8]		; Num value
 00000203  83 F8 00			CMP			EAX, 0
 00000206  7C 29			JL			_isNegative

					;; convert back to string
 00000208  FC				CLD								; Move forwards through string
 00000209  8B 45 08			MOV			EAX, [EBP + 8]		; OFFSET of Num
 0000020C  53				PUSH		EBX
 0000020D				_divideLoop:
 0000020D  BA 00000000			MOV			EDX, 0
 00000212  BB 0000000A			MOV			EBX, 10	
 00000217  F7 F3			DIV			EBX
 00000219  83 C2 30			ADD			EDX, 48				; add ascii conversion
 0000021C  50				PUSH		EAX
 0000021D  8B C2			MOV			EAX, EDX			; move remainder to store it.
 0000021F  AA				STOSB
 00000220  58				POP			EAX
 00000221  41				INC			ECX	
 00000222  83 F8 00			CMP			EAX, 0
 00000225  75 E6			JNE			_divideLoop			; repeat until there is no quotient.
 00000227  5B				POP			EBX
 00000228  8B 03			MOV			EAX, [EBX]
 0000022A  83 F8 00			CMP			EAX, 0
 0000022D  74 1A			JE			_notNeg
 0000022F  EB 10			JMP			_reverse



 00000231				_isNegative:
					; set neg flag and go back
 00000231  53				PUSH		EBX
 00000232  B8 00000001			MOV			EAX, 1				; set negative flag
 00000237  89 03			MOV			[EBX], EAX
 00000239  8B 45 08			MOV			EAX, [EBP+8]
 0000023C  F7 D8			NEG			EAX
 0000023E  41				INC			ECX
 0000023F  EB CC			JMP			_divideLoop

					

 00000241				_reverse:
 00000241  B8 00000000			MOV			EAX, 0
 00000246  B0 2D			MOV			AL, '-'
 00000248  AA				STOSB
 00000249				_notNeg:
 00000249  8B 75 14			MOV			ESI, [EBP+20]
 0000024C  8B 7D 0C			MOV			EDI, [EBP+12]
 0000024F  03 F1			ADD			ESI, ECX
 00000251  4E				DEC			ESI

 00000252				_revLoop:
 00000252  FD					STD
 00000253  AC					LODSB
 00000254  FC					CLD
 00000255  AA					STOSB
 00000256  E2 FA			LOOP		_revLoop
					
					
 00000258  B0 00			MOV			AL, 0
 0000025A  AA				STOSB				; null terminator


					mDisplayString [EBP+12]
 0000025B  52		     1		PUSH		EDX
 0000025C  8B 55 0C	     1		MOV			EDX, [EBP+12]
 0000025F  E8 00000000 E     1		CALL		WriteString
 00000264  5A		     1		POP			EDX

 00000265  5F				POP			EDI
 00000266  5E				POP			ESI
 00000267  5A				POP			EDX
 00000268  59				POP			ECX
 00000269  5B				POP			EBX
 0000026A  58				POP			EAX
 0000026B  5D				POP			EBP
 0000026C  C2 0010			RET			16
 0000026F			WriteVal ENDP


				; ---------------------------------------------------------------------------------
				; Name: findSmallest
				;
				; Finds the smallest integer in an array and returns it in the eax register.
				;
				; Preconditions: the array contains only positive values.
				;
				; Postconditions: none.
				;
				; Receives:
				; [ebp+16] = type of array element
				; [ebp+12] = length of array
				; [ebp+8] = address of array
				; arrayMsg, arrayError are global variables
				;
				; returns: eax = smallest integer
				; ---------------------------------------------------------------------------------
 0000026F			CalcAvg PROC
				; 
 0000026F  55				PUSH		EBP
 00000270  8B EC			MOV			EBP, ESP

 00000272			CalcAvg ENDP


				END main
Microsoft (R) Macro Assembler Version 14.29.30147.0	    03/10/23 19:00:25
 Project 6     (Proj6_dalyer.asm			     Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000297 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000272 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CalcAvg  . . . . . . . . . . . .	P Near	 0000026F _TEXT	Length= 00000003 Public STDCALL
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Introduction . . . . . . . . . .	P Near	 000000E1 _TEXT	Length= 00000043 Public STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 00000124 _TEXT	Length= 000000C8 Public STDCALL
  _start . . . . . . . . . . . .	L Near	 00000135 _TEXT	
  _conversionLoop  . . . . . . .	L Near	 00000169 _TEXT	
  _endLoop . . . . . . . . . . .	L Near	 00000195 _TEXT	
  _error . . . . . . . . . . . .	L Near	 00000199 _TEXT	
  _minusSign . . . . . . . . . .	L Near	 000001AA _TEXT	
  _plusSign  . . . . . . . . . .	L Near	 000001BA _TEXT	
  _endOfProc . . . . . . . . . .	L Near	 000001CA _TEXT	
  _notNeg  . . . . . . . . . . .	L Near	 000001DD _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 000001EC _TEXT	Length= 00000083 Public STDCALL
  _divideLoop  . . . . . . . . .	L Near	 0000020D _TEXT	
  _isNegative  . . . . . . . . .	L Near	 00000231 _TEXT	
  _reverse . . . . . . . . . . .	L Near	 00000241 _TEXT	
  _notNeg  . . . . . . . . . . .	L Near	 00000249 _TEXT	
  _revLoop . . . . . . . . . . .	L Near	 00000252 _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000E1 Public STDCALL
  _ReadValLoop . . . . . . . . .	L Near	 00000037 _TEXT	
  _PrintArrayLoop  . . . . . . .	L Near	 0000009A _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAXCHAR  . . . . . . . . . . . .	Number	 00000015h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MINUS  . . . . . . . . . . . . .	Text   	 "-",0
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PLUS . . . . . . . . . . . . . .	Text   	 "+",0
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
avgString  . . . . . . . . . . .	Byte	 0000026F _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
bytesRead  . . . . . . . . . . .	DWord	 0000028F _DATA	
by . . . . . . . . . . . . . . .	Byte	 00000049 _DATA	
closingDisplay . . . . . . . . .	Byte	 000001FA _DATA	
countValue . . . . . . . . . . .	DWord	 0000028B _DATA	
currentNum . . . . . . . . . . .	DWord	 000001CE _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
description1 . . . . . . . . . .	Byte	 00000083 _DATA	
description2 . . . . . . . . . .	Byte	 000000CC _DATA	
directions1  . . . . . . . . . .	Byte	 00000056 _DATA	
error  . . . . . . . . . . . . .	Byte	 0000017E _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
isNeg  . . . . . . . . . . . . .	DWord	 00000293 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
myName . . . . . . . . . . . . .	Byte	 0000003F _DATA	
numArray . . . . . . . . . . . .	DWord	 000001D2 _DATA	
numString  . . . . . . . . . . .	Byte	 0000021F _DATA	
program  . . . . . . . . . . . .	Byte	 00000000 _DATA	
prompt . . . . . . . . . . . . .	Byte	 0000014B _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
revString  . . . . . . . . . . .	Byte	 00000233 _DATA	
sumString  . . . . . . . . . . .	Byte	 0000024B _DATA	
sum  . . . . . . . . . . . . . .	DWord	 00000247 _DATA	
truncatedAverage . . . . . . . .	DWord	 0000026B _DATA	
userNum  . . . . . . . . . . . .	Byte	 0000016A _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
