Microsoft (R) Macro Assembler Version 14.29.30147.0	    03/11/23 14:15:49
 Project 6     (Proj6_dalyer.asm			     Page 1 - 1


				TITLE Project 6     (Proj6_dalyer.asm)

				; Author: Eric Daly
				; Last Modified: 3/7/2023
				; OSU email address: dalyer@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number:  6              Due Date: 3/19/2023
				; Description: Uses 2 macros for string processing. One that gets input from the user and one that dispalys the output.
				;		Has two test procedures for signed integers which use string primitive instructions. ReadVal will use mGetString to convert the string of ASCII
				;		digits to its numeric value, and validate the user's input. It then stores the value. WriteVal will convert a numeric SDWORD to a string of ASCII
				;		digits and use mDisplayString to print the ASCII representation of the SDWORD.
				;		Then, MAIN will use ReadVal and WriteVal to get 10 integers from a user, looping in MAIN, store these values in array format, then display
				;		the integers and their sum and truncated average.

				;;		Must use Register Indirect addressing or string primitives for integer elements, 
				;;		and base+offset addresing for accessing parameters on the stack!!!

				;; **EC: First EC, numbers the input lines using WriteVal and display a running total.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; (insert macro definitions here)
				; ---------------------------------------------------------------------------------
				; Name: mGetString
				;
				; Purpose: Display a prompt then get the user's keyboard input into a memory location.
				;
				; Preconditions: Dont use EDX, ECX, EAX as arguments
				;
				; Receives: OFFSETS for prompt, userinput, and bytes read variables. Value of max length accomadatable.
				;
				; ---------------------------------------------------------------------------------
				mGetString			MACRO	promptReference, userInputReference, countValue, bytesReadReference
				; Displays a prompt, and then gets the user's input and stores in in a specific memory location.
					PUSH		ECX
					PUSH		EDX
					PUSH		EAX
					
					MOV			EDX, promptReference
					CALL		WriteString					; Writes Prompt

					MOV			ECX, countValue				; Length of input string macro can accomodate
					MOV			EDX, userInputReference
					CALL		ReadString				; stores userInput to userInputReference memory location. Should be OFFSET userNum.

					MOV			[bytesReadReference], EAX	; Stores number of bytes entered into bytesRead.

					POP			EAX
					POP			EDX
					POP			ECX
				ENDM

				; ---------------------------------------------------------------------------------
				; Name: mDisplayString
				;
				; Purpose: Uses WriteString to display a string to the console
				;
				; Preconditions: Dont use EDX as an argument
				;
				; Receives: OFFSET for the string to be printed.
				;
				; ---------------------------------------------------------------------------------
				mDisplayString		MACRO	stringReference
					PUSH		EDX

					MOV			EDX, stringReference
					CALL		WriteString

					POP			EDX
				ENDM

				; (insert constant definitions here)


 = 00000015			MAXCHAR			=		21			; Max value accomodatable in mGetString

 00000000			.data

				; (insert variable definitions here)


 00000000 50 72 6F 67 72	program				BYTE		"Programming Assignment 6: Designing low-level I/O Procedures",13,10,0
	   61 6D 6D 69 6E
	   67 20 41 73 73
	   69 67 6E 6D 65
	   6E 74 20 36 3A
	   20 44 65 73 69
	   67 6E 69 6E 67
	   20 6C 6F 77 2D
	   6C 65 76 65 6C
	   20 49 2F 4F 20
	   50 72 6F 63 65
	   64 75 72 65 73
	   0D 0A 00
 0000003F 45 72 69 63 20	myName				BYTE		"Eric Daly",0
	   44 61 6C 79 00
 00000049 57 72 69 74 74	by					BYTE		"Written by: ",0
	   65 6E 20 62 79
	   3A 20 00
 00000056 50 6C 65 61 73	directions1			BYTE		"Please provide 10 signed decimal integers.",13,10,0
	   65 20 70 72 6F
	   76 69 64 65 20
	   31 30 20 73 69
	   67 6E 65 64 20
	   64 65 63 69 6D
	   61 6C 20 69 6E
	   74 65 67 65 72
	   73 2E 0D 0A 00
 00000083 45 61 63 68 20	description1		BYTE		"Each number needs to be small enough to fit inside a 32 bit register. ",13,10,0
	   6E 75 6D 62 65
	   72 20 6E 65 65
	   64 73 20 74 6F
	   20 62 65 20 73
	   6D 61 6C 6C 20
	   65 6E 6F 75 67
	   68 20 74 6F 20
	   66 69 74 20 69
	   6E 73 69 64 65
	   20 61 20 33 32
	   20 62 69 74 20
	   72 65 67 69 73
	   74 65 72 2E 20
	   0D 0A 00
 000000CC 41 66 74 65 72	description2		BYTE		"After you have finished inputting the raw numbers I will display a list of the integers, their sum, and their average value.",13,10,0
	   20 79 6F 75 20
	   68 61 76 65 20
	   66 69 6E 69 73
	   68 65 64 20 69
	   6E 70 75 74 74
	   69 6E 67 20 74
	   68 65 20 72 61
	   77 20 6E 75 6D
	   62 65 72 73 20
	   49 20 77 69 6C
	   6C 20 64 69 73
	   70 6C 61 79 20
	   61 20 6C 69 73
	   74 20 6F 66 20
	   74 68 65 20 69
	   6E 74 65 67 65
	   72 73 2C 20 74
	   68 65 69 72 20
	   73 75 6D 2C 20
	   61 6E 64 20 74
	   68 65 69 72 20
	   61 76 65 72 61
	   67 65 20 76 61
	   6C 75 65 2E 0D
	   0A 00
 0000014B 50 6C 65 61 73	prompt				BYTE		"Please enter a signed number: ",0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 6E 75 6D
	   62 65 72 3A 20
	   00
 0000016A 45 52 52 4F 52	error				BYTE		"ERROR: You did not enter a signed number or your number was too big. Try again!",0
	   3A 20 59 6F 75
	   20 64 69 64 20
	   6E 6F 74 20 65
	   6E 74 65 72 20
	   61 20 73 69 67
	   6E 65 64 20 6E
	   75 6D 62 65 72
	   20 6F 72 20 79
	   6F 75 72 20 6E
	   75 6D 62 65 72
	   20 77 61 73 20
	   74 6F 6F 20 62
	   69 67 2E 20 54
	   72 79 20 61 67
	   61 69 6E 21 00
 000001BA 00000000		currentNum			SDWORD		?
 000001BE  0000000A [		numArray			SDWORD		10 DUP(?)
	    00000000
	   ]
 000001E6 59 6F 75 20 65	closingDisplay		BYTE		"You entered the following numbers:",13,10,0
	   6E 74 65 72 65
	   64 20 74 68 65
	   20 66 6F 6C 6C
	   6F 77 69 6E 67
	   20 6E 75 6D 62
	   65 72 73 3A 0D
	   0A 00
 0000020B  00000032 [		numString			BYTE		50 DUP (?)
	    00
	   ]
 0000023D  00000032 [		revString			BYTE		50 DUP (?)
	    00
	   ]
 0000026F 00000000		sum					SDWORD		?
 00000273 54 68 65 20 73	sumString			BYTE		"The sum of these numbers is: ",0
	   75 6D 20 6F 66
	   20 74 68 65 73
	   65 20 6E 75 6D
	   62 65 72 73 20
	   69 73 3A 20 00
 00000291 00000000		truncatedAverage	SDWORD		?
 00000295 54 68 65 20 74	avgString			BYTE		"The truncated average is: ",0
	   72 75 6E 63 61
	   74 65 64 20 61
	   76 65 72 61 67
	   65 20 69 73 3A
	   20 00
 000002B0 0000000D		countValue			SDWORD		13		; Should it be >12 to account for -2147483648 and null terminator?
 000002B4 00000000		bytesRead			DWORD		0
 000002B8 00000000		isNeg				DWORD		0		; assumed positive -- BOOLEAN 0 if popsitive, 1 if negative
 000002BC 54 68 61 6E 6B	goodbye				BYTE		"Thanks for all the help this quarter! This class was amazing!",13,10,0
	   73 20 66 6F 72
	   20 61 6C 6C 20
	   74 68 65 20 68
	   65 6C 70 20 74
	   68 69 73 20 71
	   75 61 72 74 65
	   72 21 20 54 68
	   69 73 20 63 6C
	   61 73 73 20 77
	   61 73 20 61 6D
	   61 7A 69 6E 67
	   21 0D 0A 00
 000002FC 2C 00			comma				BYTE		",",0
 000002FE 20 00			space				BYTE		" ",0
 00000300 00000000		count				DWORD		0
 00000304 54 68 65 20 72	currentTotal		BYTE		"The running subtotal of your numbers is: ",0
	   75 6E 6E 69 6E
	   67 20 73 75 62
	   74 6F 74 61 6C
	   20 6F 66 20 79
	   6F 75 72 20 6E
	   75 6D 62 65 72
	   73 20 69 73 3A
	   20 00
 0000032E 2A 2A 45 43 3A	extraCredit1		BYTE		"**EC: First EC, numbers the input lines using WriteVal and display a running total.",13,10,0
	   20 46 69 72 73
	   74 20 45 43 2C
	   20 6E 75 6D 62
	   65 72 73 20 74
	   68 65 20 69 6E
	   70 75 74 20 6C
	   69 6E 65 73 20
	   75 73 69 6E 67
	   20 57 72 69 74
	   65 56 61 6C 20
	   61 6E 64 20 64
	   69 73 70 6C 61
	   79 20 61 20 72
	   75 6E 6E 69 6E
	   67 20 74 6F 74
	   61 6C 2E 0D 0A
	   00
 00000384  00000032 [		userNum				byte		50 DUP(?)
	    00
	   ]

 00000000			.code
 00000000			main PROC 

				; (insert executable instructions here)
 00000000  68 0000032E R		PUSH			OFFSET extraCredit1
 00000005  68 00000000 R		PUSH			OFFSET program
 0000000A  68 00000049 R		PUSH			OFFSET by
 0000000F  68 0000003F R		PUSH			OFFSET myName
 00000014  68 00000056 R		PUSH			OFFSET directions1
 00000019  68 00000083 R		PUSH			OFFSET description1
 0000001E  68 000000CC R		PUSH			OFFSET description2
 00000023  E8 000001B8			CALL			Introduction

					; Set up ReadVal loop
 00000028  BA 000001BE R		MOV				EDX, OFFSET numArray
 0000002D  B9 0000000A			MOV				ECX, 10
 00000032  BB 00000004			MOV				EBX, 4
 00000037  B8 00000000			MOV				EAX, 0
 0000003C				_ReadValLoop:				; convert strings to integers until 10 valid are captured.
						; Line numbers
 0000003C  68 0000023D R			PUSH			OFFSET revString
 00000041  68 000002B8 R			PUSH			OFFSET isNeg
 00000046  68 0000020B R			PUSH			OFFSET numString
 0000004B  FF 35 00000300 R			PUSH			count
 00000051  E8 000002D2				CALL			WriteVal
 00000056  FF 05 00000300 R			INC				count
						mDisplayString	OFFSET space
 0000005C  52		     1		PUSH		EDX
 0000005D  BA 000002FE R     1		MOV			EDX, OFFSET space
 00000062  E8 00000000 E     1		CALL		WriteString
 00000067  5A		     1		POP			EDX
						mDisplayString	OFFSET currentTotal
 00000068  52		     1		PUSH		EDX
 00000069  BA 00000304 R     1		MOV			EDX, OFFSET currentTotal
 0000006E  E8 00000000 E     1		CALL		WriteString
 00000073  5A		     1		POP			EDX
 00000074  68 0000023D R			PUSH			OFFSET revString
 00000079  68 000002B8 R			PUSH			OFFSET isNeg
 0000007E  68 0000020B R			PUSH			OFFSET numString
 00000083  FF 35 0000026F R			PUSH			sum
 00000089  E8 0000029A				CALL			WriteVal
 0000008E  E8 00000000 E			CALL			CrlF
						;current total
 00000093  68 000002B8 R			PUSH			OFFSET isNeg
 00000098  68 0000014B R			PUSH			OFFSET prompt
 0000009D  68 00000384 R			PUSH			OFFSET userNum
 000000A2  FF 35 000002B0 R			PUSH			countValue
 000000A8  68 000002B4 R			PUSH			OFFSET bytesRead
 000000AD  68 0000016A R			PUSH			OFFSET error
 000000B2  68 000001BA R			PUSH			OFFSET currentNum
 000000B7  E8 00000185				CALL			ReadVal
 000000BC  8B 3D 000001BA R			MOV				EDI, currentNum
 000000C2  89 3A				MOV				[EDX], EDI			; put currentNum into proper location in array
 000000C4  03 D3				ADD				EDX, EBX			; increment SDWORD array by 4 (SDWORD)
 000000C6  03 05 000001BA R			ADD				EAX, currentNum		; ADD to sum
 000000CC  A3 0000026F R			MOV				sum, EAX
 000000D1  83 F9 00				CMP				ECX, 0
 000000D4  49					DEC				ECX
 000000D5  0F 87 FFFFFF61		JA				_ReadValLoop		; 18 bytes too large for LOOP 
 000000DB  E8 00000000 E		CALL			CrLf
 000000E0  E8 00000000 E		CALL			CrLf


					; Print out array as strings
					mDisplayString	OFFSET closingDisplay
 000000E5  52		     1		PUSH		EDX
 000000E6  BA 000001E6 R     1		MOV			EDX, OFFSET closingDisplay
 000000EB  E8 00000000 E     1		CALL		WriteString
 000000F0  5A		     1		POP			EDX
 000000F1  B9 0000000A			MOV				ECX, 10
 000000F6  BB 00000000			MOV				EBX, 0
 000000FB  B8 00000000			MOV				EAX, 0
 00000100				_PrintArrayLoop:
 00000100  B8 000001BE R			MOV				EAX, OFFSET numArray	
 00000105  C7 05 000002B8 R			MOV				isNeg, 0
	   00000000
						; assume positive
 0000010F  68 0000023D R			PUSH			OFFSET revString
 00000114  68 000002B8 R			PUSH			OFFSET isNeg
 00000119  68 0000020B R			PUSH			OFFSET numString
 0000011E  FF 34 18				PUSH			[EAX + EBX]
 00000121  E8 00000202				CALL			WriteVal
 00000126  83 C3 04				ADD				EBX, 4
 00000129  83 F9 01				CMP				ECX, 1
 0000012C  77 0E				JA				_addComma
 0000012E					_endOfPrintLoop:
 0000012E  E2 D0			LOOP			_PrintArrayLoop
 00000130  E8 00000000 E		CALL			CrLf
 00000135  E8 00000000 E		CALL			CrLf
 0000013A  EB 1A			JMP				_sum



 0000013C				_addComma:
				  ; Add comma and space if ECX>1
					mDisplayString	OFFSET comma
 0000013C  52		     1		PUSH		EDX
 0000013D  BA 000002FC R     1		MOV			EDX, OFFSET comma
 00000142  E8 00000000 E     1		CALL		WriteString
 00000147  5A		     1		POP			EDX
					mDisplayString	OFFSET space
 00000148  52		     1		PUSH		EDX
 00000149  BA 000002FE R     1		MOV			EDX, OFFSET space
 0000014E  E8 00000000 E     1		CALL		WriteString
 00000153  5A		     1		POP			EDX
 00000154  EB D8			JMP				_endOfPrintLoop

 00000156				_sum:
					mDisplayString	OFFSET sumString
 00000156  52		     1		PUSH		EDX
 00000157  BA 00000273 R     1		MOV			EDX, OFFSET sumString
 0000015C  E8 00000000 E     1		CALL		WriteString
 00000161  5A		     1		POP			EDX

 00000162  68 0000023D R		PUSH			OFFSET revString
 00000167  68 000002B8 R		PUSH			OFFSET isNeg
 0000016C  68 0000020B R		PUSH			OFFSET numString
 00000171  FF 35 0000026F R		PUSH			sum
 00000177  E8 000001AC			CALL			WriteVal
 0000017C  E8 00000000 E		CALL			CrLf
 00000181  E8 00000000 E		CALL			CrLf

				; AVG CALC
					mDisplayString	OFFSET avgString
 00000186  52		     1		PUSH		EDX
 00000187  BA 00000295 R     1		MOV			EDX, OFFSET avgString
 0000018C  E8 00000000 E     1		CALL		WriteString
 00000191  5A		     1		POP			EDX
 00000192  A1 0000026F R		MOV				EAX, sum
 00000197  BA 00000000			MOV				EDX, 0
 0000019C  BB 0000000A			MOV				EBX, 10
 000001A1  99				CDQ
 000001A2  F7 FB			IDIV			EBX
 000001A4  A3 00000291 R		MOV				truncatedAverage, EAX

					;
 000001A9  68 0000023D R		PUSH			OFFSET revString
 000001AE  68 000002B8 R		PUSH			OFFSET isNeg
 000001B3  68 0000020B R		PUSH			OFFSET numString
 000001B8  FF 35 00000291 R		PUSH			truncatedAverage
 000001BE  E8 00000165			CALL			WriteVal
 000001C3  E8 00000000 E		CALL			CrLf
 000001C8  E8 00000000 E		CALL			CrLf

					mDisplayString	OFFSET goodbye
 000001CD  52		     1		PUSH		EDX
 000001CE  BA 000002BC R     1		MOV			EDX, OFFSET goodbye
 000001D3  E8 00000000 E     1		CALL		WriteString
 000001D8  5A		     1		POP			EDX


					Invoke ExitProcess,0	; exit to operating system
 000001D9  6A 00	   *	    push   +000000000h
 000001DB  E8 00000000 E   *	    call   ExitProcess
 000001E0			main ENDP

				; (insert additional procedures here)


				; ---------------------------------------------------------------------------------
				; Name: Introduction
				;
				; Uses mDisplayString to print out the title, introduction, and description of the program
				;
				; Preconditions: The offsets of program, by, myname, directions1, and description1-2 are passed as parameters
				;
				; Postconditions: EBP is used and restored to previous value.
				;
				; Receives:
				; [ebp+32] = OFFSET extraCredit1
				; [ebp+28] = OFFSET program
				; [ebp+24] = OFFSET by
				; [ebp+20] = OFFSET myName
				; [ebp+16] = OFFSET directions1
				; [ebp+12] = OFFSET description1
				; [ebp+8] = OFFSET description2
				; arrayMsg, arrayError are global variables
				;
				; returns: Prints strings to the console for the user to view.
				; ---------------------------------------------------------------------------------

 000001E0			Introduction PROC
				; Writes all of the instructions to the screen
 000001E0  55				PUSH		EBP
 000001E1  8B EC			MOV			EBP, ESP

					mDisplayString [EBP+28]	; title
 000001E3  52		     1		PUSH		EDX
 000001E4  8B 55 1C	     1		MOV			EDX, [EBP+28]
 000001E7  E8 00000000 E     1		CALL		WriteString
 000001EC  5A		     1		POP			EDX
					mDisplayString [EBP+24] ; by
 000001ED  52		     1		PUSH		EDX
 000001EE  8B 55 18	     1		MOV			EDX, [EBP+24]
 000001F1  E8 00000000 E     1		CALL		WriteString
 000001F6  5A		     1		POP			EDX
					mDisplayString [EBP+20] ; my name
 000001F7  52		     1		PUSH		EDX
 000001F8  8B 55 14	     1		MOV			EDX, [EBP+20]
 000001FB  E8 00000000 E     1		CALL		WriteString
 00000200  5A		     1		POP			EDX
 00000201  E8 00000000 E		CALL		CrLf
 00000206  E8 00000000 E		CALL		CrLf
					mDisplayString [EBP+16] ; directions1
 0000020B  52		     1		PUSH		EDX
 0000020C  8B 55 10	     1		MOV			EDX, [EBP+16]
 0000020F  E8 00000000 E     1		CALL		WriteString
 00000214  5A		     1		POP			EDX
					mDisplayString [EBP+12] ; description1
 00000215  52		     1		PUSH		EDX
 00000216  8B 55 0C	     1		MOV			EDX, [EBP+12]
 00000219  E8 00000000 E     1		CALL		WriteString
 0000021E  5A		     1		POP			EDX
					mDisplayString [EBP+8]  ; description2
 0000021F  52		     1		PUSH		EDX
 00000220  8B 55 08	     1		MOV			EDX, [EBP+8]
 00000223  E8 00000000 E     1		CALL		WriteString
 00000228  5A		     1		POP			EDX
					mDisplaystring [EBP+32] ; EC1
 00000229  52		     1		PUSH		EDX
 0000022A  8B 55 20	     1		MOV			EDX, [EBP+32]
 0000022D  E8 00000000 E     1		CALL		WriteString
 00000232  5A		     1		POP			EDX
 00000233  E8 00000000 E		CALL		CrLf
 00000238  E8 00000000 E		CALL		CrLf

 0000023D  5D				POP			EBP
 0000023E  C2 0018			RET			24
 00000241			Introduction ENDP



				; ---------------------------------------------------------------------------------
				; Name: ReadVal
				;
				; Invokes mGetString to get user input and converts it to its numeric value SDWORD. 
				;	Then validates it is a number and stores it in an array. If invalid input, the procedure will print an error
				;	and repeatedly prompt the user until valid data is entered.
				;
				; Preconditions: mGetString is a predefined macro. MAXCHAR is a predefined constant.
				;
				; Postconditions: Uses PUSHAD/POPAD to restore all registers to their previous values.
				;
				; Receives:
				; [ebp+32] = OFFSET isNeg
				; [ebp+28] = OFFSET prompt
				; [ebp+24] = OFFSET userNum
				; [ebp+20] = countValue
				; [ebp+16] = OFFFSET bytesRead
				; [ebp+12] = OFFSET error
				; [ebp+8] = OFFSET currentNum
				; MAXCHAR is a defined constant - passed to mGetString
				;
				; returns: numeric value is stored in currentNum 
				; ---------------------------------------------------------------------------------
 00000241			ReadVal PROC 
				;  Invokes mGetString to get user input and converts it to its numeric value SDWORD. Then validates it is a number and stores it in an array.
 00000241  55				PUSH		EBP
 00000242  8B EC			MOV			EBP, ESP				; Base pointer
 00000244  60				PUSHAD
 00000245  FC				CLD									; moving forward in strings
					
 00000246				_start:
 00000246  8B 5D 10			MOV			EBX, [EBP+16]			; BYTES READ
 00000249  BA 00000000			MOV			EDX, 0					; accumulator
 0000024E  8B 45 20			MOV			EAX, [EBP+32]			; Make sure number is assumed positive
 00000251  89 10			MOV			[EAX], EDX				; EDI at 0, so using it to clear Neg


					mGetString	[EBP + 28], [EBP + 24], MAXCHAR, EBX
 00000253  51		     1		PUSH		ECX
 00000254  52		     1		PUSH		EDX
 00000255  50		     1		PUSH		EAX
 00000256  8B 55 1C	     1		MOV			EDX, [EBP + 28]
 00000259  E8 00000000 E     1		CALL		WriteString					; Writes Prompt
 0000025E  B9 00000015	     1		MOV			ECX, MAXCHAR				; Length of input string macro can accomodate
 00000263  8B 55 18	     1		MOV			EDX, [EBP + 24]
 00000266  E8 00000000 E     1		CALL		ReadString				; stores userInput to userInputReference memory location. Should be OFFSET userNum.
 0000026B  89 03	     1		MOV			[EBX], EAX	; Stores number of bytes entered into bytesRead.
 0000026D  58		     1		POP			EAX
 0000026E  5A		     1		POP			EDX
 0000026F  59		     1		POP			ECX

 00000270  8B 03			MOV			EAX, [EBX]
 00000272  3B 45 14			CMP			EAX, [ebp+20]			; compared bytes read to max allowable length
 00000275  7F 4B			JG			_error
 00000277  83 F8 00			CMP			EAX, 0					; Nothing entered
 0000027A  74 46			JE			_error
 0000027C  8B 5D 18			MOV			EBX, [EBP+24]
 0000027F  8B 0B			MOV			ECX, [EBX]

 00000281  8B C8			MOV			ECX, EAX				; BYTES READ
 00000283  FC				CLD									;Clear direction Flag - move forwards
 00000284  8B 75 18			MOV			ESI, [EBP + 24]			; userNum input string location
 00000287  B8 00000000			MOV			EAX, 0
 0000028C				_conversionLoop:
 0000028C  AC					LODSB								; Load byte by byte into AL
 0000028D  3C 2B				CMP			AL, '+'
 0000028F  74 2D				JE			_endLoop				; skip positive sign
 00000291  3C 2D				CMP			AL, '-'
 00000293  74 55				JE			_minusSign				; handle negative number
 00000295  3C 2B				CMP			AL, '+'
 00000297  74 61				JE			_plusSign
 00000299  3C 30				CMP			AL, '0'
 0000029B  72 25				JB			_error
 0000029D  3C 39				CMP			AL, '9'
 0000029F  77 21				JA			_error
											
															; Otherwise, number is good, convert and add to integer array
 000002A1  BB 0000000A				MOV			EBX, 10	
 000002A6  50					PUSH		EAX
 000002A7  8B C2				MOV			EAX, EDX				; multiply accumulator by 10 for each digit
 000002A9  F7 EB				IMUL		EBX
 000002AB  8B D0				MOV			EDX, EAX				; move product back to accumulator
 000002AD  B8 00000000				MOV			EAX, 0
 000002B2  58					POP			EAX						; add next digit to accumulator
 000002B3  70 21				JO			_minValCheck
 000002B5  83 E8 30				SUB			EAX, 48
 000002B8  70 1C				JO			_minValCheck
 000002BA  03 D0				ADD			EDX, EAX				; Use same sized register
 000002BC  70 18				JO			_minValCheck			; 3 JO due to OF flag being raised at different times if the values are close to the max.
 000002BE					_endLoop:
 000002BE  E2 CC			LOOP		_conversionLoop
 000002C0  EB 48			JMP			_endOfProc


 000002C2				_error:
					; Prints the error message and jumps back to the start to reprompt for valid input
					mDisplayString	[EBP+12]
 000002C2  52		     1		PUSH		EDX
 000002C3  8B 55 0C	     1		MOV			EDX, [EBP+12]
 000002C6  E8 00000000 E     1		CALL		WriteString
 000002CB  5A		     1		POP			EDX
 000002CC  E8 00000000 E		CALL			CrLf
 000002D1  E9 FFFFFF70			JMP				_start

 000002D6				_minValCheck:
					; Check if the value is -2147483648, otherwise it is either too large or too small.
 000002D6  81 FA 80000000		CMP			EDX, 2147483648
 000002DC  77 E4			JA			_error
 000002DE  8B 5D 20			MOV			EBX, [EBP+32]
 000002E1  8B 0B			MOV			ECX, [EBX]
 000002E3  83 F9 00			CMP			ECX, 0	
 000002E6  74 DA			JE			_error
 000002E8  EB 20			JMP			_endOfProc

 000002EA				_minusSign:
					; adds minus sign to string
 000002EA  53				PUSH		EBX
 000002EB  51				PUSH		ECX
 000002EC  8B 5D 20			MOV			EBX, [EBP+32]
 000002EF  B9 00000001			MOV			ECX, 1
 000002F4  89 0B			MOV			[EBX], ECX
 000002F6  59				POP			ECX
 000002F7  5B				POP			EBX
 000002F8  EB C4			JMP			_endLoop	; increment forwards

 000002FA				_plusSign:
					; skip the plus sign, as it is not relevant
 000002FA  53				PUSH		EBX
 000002FB  51				PUSH		ECX
 000002FC  8B 5D 20			MOV			EBX, [EBP+32]
 000002FF  B9 00000000			MOV			ECX, 0
 00000304  89 0B			MOV			[EBX], ECX
 00000306  59				POP			ECX
 00000307  5B				POP			EBX
 00000308  EB B4			JMP			_endLoop	; increment forwards

 0000030A				_endOfProc:
					; IF [EBP+32] IS 1, NEG THE NUMBER.
 0000030A  8B 5D 20			MOV			EBX, [EBP+32]
 0000030D  8B 0B			MOV			ECX, [EBX]
 0000030F  83 F9 00			CMP			ECX, 0
 00000312  74 09			JE			_notNeg
 00000314  F7 DA			NEG			EDX			; twos complement for SDWORD
 00000316  B9 00000000			MOV			ECX, 0
 0000031B  89 0B			MOV			[EBX], ECX
 0000031D				_notNeg:				; avoid NEG
 0000031D  8B 7D 08			MOV			EDI, [EBP+8]
 00000320  8B C2			MOV			EAX, EDX
 00000322  AB				STOSD					; Store DWORD in EDI, which points to OFFSET of currentNum

 00000323  61				POPAD
 00000324  5D				POP			EBP
 00000325  C2 001C			RET			28

 00000328			ReadVal ENDP



				; ---------------------------------------------------------------------------------
				; Name: WriteVal
				;
				; Converts an SDWORD value into a string and prints it using mDisplayString.
				;
				; Preconditions: mDisplayString is a predefined constant.
				;
				; Postconditions: none.
				;
				; Receives:
				; [ebp+20] = OFFSET revNumString
				; [ebp+16] = OFFFSET isNeg
				; [ebp+12] = OFFSET numString
				; [ebp+8] = value to be converted
				; arrayMsg, arrayError are global variables
				;
				; returns: eax = smallest integer
				; ---------------------------------------------------------------------------------
 00000328			WriteVal PROC
				; Converts an SDWORD value into a string and prints it using mDisplayString.
 00000328  55				PUSH		EBP
 00000329  8B EC			MOV			EBP, ESP				; Base pointer
 0000032B  60				PUSHAD

 0000032C  8B 5D 10			MOV			EBX, [EBP+16]			; offset isNeg
 0000032F  8B 7D 14			MOV			EDI, [EBP+20]			; Reverse numstring offset
 00000332  B9 00000000			MOV			ECX, 0					; count for string reversal
					; CHeck if neg.
 00000337  8B 45 08			MOV			EAX, [EBP + 8]		; Num value
 0000033A  83 F8 00			CMP			EAX, 0
 0000033D  7C 29			JL			_isNegative

					;; convert back to string
 0000033F  FC				CLD								; Move forwards through string
 00000340  8B 45 08			MOV			EAX, [EBP + 8]		; OFFSET of Num
 00000343  53				PUSH		EBX
 00000344				_divideLoop:
 00000344  BA 00000000			MOV			EDX, 0
 00000349  BB 0000000A			MOV			EBX, 10	
 0000034E  F7 F3			DIV			EBX
 00000350  83 C2 30			ADD			EDX, 48				; add ascii conversion
 00000353  50				PUSH		EAX
 00000354  8B C2			MOV			EAX, EDX			; move remainder to store it.
 00000356  AA				STOSB
 00000357  58				POP			EAX
 00000358  41				INC			ECX	
 00000359  83 F8 00			CMP			EAX, 0
 0000035C  75 E6			JNE			_divideLoop			; repeat until there is no quotient.
 0000035E  5B				POP			EBX
 0000035F  8B 03			MOV			EAX, [EBX]
 00000361  83 F8 00			CMP			EAX, 0
 00000364  74 1A			JE			_notNeg
 00000366  EB 10			JMP			_reverse



 00000368				_isNegative:
					; set neg flag and go back
 00000368  53				PUSH		EBX
 00000369  B8 00000001			MOV			EAX, 1				; set negative flag
 0000036E  89 03			MOV			[EBX], EAX
 00000370  8B 45 08			MOV			EAX, [EBP+8]
 00000373  F7 D8			NEG			EAX
 00000375  41				INC			ECX
 00000376  EB CC			JMP			_divideLoop

					

 00000378				_reverse:
 00000378  B8 00000000			MOV			EAX, 0
 0000037D  B0 2D			MOV			AL, '-'
 0000037F  AA				STOSB
 00000380				_notNeg:
 00000380  8B 75 14			MOV			ESI, [EBP+20]
 00000383  8B 7D 0C			MOV			EDI, [EBP+12]
 00000386  03 F1			ADD			ESI, ECX
 00000388  4E				DEC			ESI

 00000389				_revLoop:
 00000389  FD					STD
 0000038A  AC					LODSB
 0000038B  FC					CLD
 0000038C  AA					STOSB
 0000038D  E2 FA			LOOP		_revLoop
					
					
 0000038F  B0 00			MOV			AL, 0
 00000391  AA				STOSB				; null terminator


					mDisplayString [EBP+12]
 00000392  52		     1		PUSH		EDX
 00000393  8B 55 0C	     1		MOV			EDX, [EBP+12]
 00000396  E8 00000000 E     1		CALL		WriteString
 0000039B  5A		     1		POP			EDX

 0000039C  61				POPAD
 0000039D  5D				POP			EBP
 0000039E  C2 0010			RET			16
 000003A1			WriteVal ENDP


				END main
Microsoft (R) Macro Assembler Version 14.29.30147.0	    03/11/23 14:15:49
 Project 6     (Proj6_dalyer.asm			     Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000003B6 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000003A1 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Introduction . . . . . . . . . .	P Near	 000001E0 _TEXT	Length= 00000061 Public STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 00000241 _TEXT	Length= 000000E7 Public STDCALL
  _start . . . . . . . . . . . .	L Near	 00000246 _TEXT	
  _conversionLoop  . . . . . . .	L Near	 0000028C _TEXT	
  _endLoop . . . . . . . . . . .	L Near	 000002BE _TEXT	
  _error . . . . . . . . . . . .	L Near	 000002C2 _TEXT	
  _minValCheck . . . . . . . . .	L Near	 000002D6 _TEXT	
  _minusSign . . . . . . . . . .	L Near	 000002EA _TEXT	
  _plusSign  . . . . . . . . . .	L Near	 000002FA _TEXT	
  _endOfProc . . . . . . . . . .	L Near	 0000030A _TEXT	
  _notNeg  . . . . . . . . . . .	L Near	 0000031D _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 00000328 _TEXT	Length= 00000079 Public STDCALL
  _divideLoop  . . . . . . . . .	L Near	 00000344 _TEXT	
  _isNegative  . . . . . . . . .	L Near	 00000368 _TEXT	
  _reverse . . . . . . . . . . .	L Near	 00000378 _TEXT	
  _notNeg  . . . . . . . . . . .	L Near	 00000380 _TEXT	
  _revLoop . . . . . . . . . . .	L Near	 00000389 _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000001E0 Public STDCALL
  _ReadValLoop . . . . . . . . .	L Near	 0000003C _TEXT	
  _PrintArrayLoop  . . . . . . .	L Near	 00000100 _TEXT	
  _endOfPrintLoop  . . . . . . .	L Near	 0000012E _TEXT	
  _addComma  . . . . . . . . . .	L Near	 0000013C _TEXT	
  _sum . . . . . . . . . . . . .	L Near	 00000156 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAXCHAR  . . . . . . . . . . . .	Number	 00000015h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
avgString  . . . . . . . . . . .	Byte	 00000295 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
bytesRead  . . . . . . . . . . .	DWord	 000002B4 _DATA	
by . . . . . . . . . . . . . . .	Byte	 00000049 _DATA	
closingDisplay . . . . . . . . .	Byte	 000001E6 _DATA	
comma  . . . . . . . . . . . . .	Byte	 000002FC _DATA	
countValue . . . . . . . . . . .	DWord	 000002B0 _DATA	
count  . . . . . . . . . . . . .	DWord	 00000300 _DATA	
currentNum . . . . . . . . . . .	DWord	 000001BA _DATA	
currentTotal . . . . . . . . . .	Byte	 00000304 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
description1 . . . . . . . . . .	Byte	 00000083 _DATA	
description2 . . . . . . . . . .	Byte	 000000CC _DATA	
directions1  . . . . . . . . . .	Byte	 00000056 _DATA	
error  . . . . . . . . . . . . .	Byte	 0000016A _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
extraCredit1 . . . . . . . . . .	Byte	 0000032E _DATA	
goodbye  . . . . . . . . . . . .	Byte	 000002BC _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
isNeg  . . . . . . . . . . . . .	DWord	 000002B8 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
myName . . . . . . . . . . . . .	Byte	 0000003F _DATA	
numArray . . . . . . . . . . . .	DWord	 000001BE _DATA	
numString  . . . . . . . . . . .	Byte	 0000020B _DATA	
program  . . . . . . . . . . . .	Byte	 00000000 _DATA	
prompt . . . . . . . . . . . . .	Byte	 0000014B _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
revString  . . . . . . . . . . .	Byte	 0000023D _DATA	
space  . . . . . . . . . . . . .	Byte	 000002FE _DATA	
sumString  . . . . . . . . . . .	Byte	 00000273 _DATA	
sum  . . . . . . . . . . . . . .	DWord	 0000026F _DATA	
truncatedAverage . . . . . . . .	DWord	 00000291 _DATA	
userNum  . . . . . . . . . . . .	Byte	 00000384 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
